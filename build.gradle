import me.smash.ProjectVersion
import me.smash.ScpTask
import me.smash.SshExecTask
import me.smash.VagrantTask
import me.smash.XmlToHtml
import com.github.spotbugs.SpotBugsTask

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.spotbugs:spotbugs-gradle-plugin:3.0.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"
        classpath "gradle.plugin.com.heroku.sdk:heroku-gradle:1.0.4"
    }
}


apply plugin: "org.sonarqube"
apply plugin: "com.heroku.sdk.heroku-gradle"

heroku {
    appName = "smash1986"
    includeBuildDir = false
}

gradle.taskGraph.whenReady {
    String warFile = relativePath(project(":web").tasks.withType(War).first().archiveFile.get()).toString()
    heroku.includes = [warFile, "webapp-runner-9.0.30.0.jar"]
    heroku.processTypes(web: "java \$JAVA_OPTS -jar webapp-runner-9.0.30.0.jar --port \$PORT $warFile".toString())
}

String env = project.hasProperty("env") ? project.property("env") : "local"
logger.quiet("loading configuration for enviornment \'$env\'")
def configFile = file("$rootDir/config/environment.groovy")
def parsedConfig = new ConfigSlurper(env).parse(configFile.toURI().toURL())
if (parsedConfig.server.keyfile) {
    parsedConfig.server.keyfile = parsedConfig.server.keyfile.replace('$projectDir', "$rootDir")
}

println "---------------------------------------"
println "username = $parsedConfig.server.username"
println "remoteHost = $parsedConfig.server.hostname"
println "keyFile = $parsedConfig.server.keyfile"
println "---------------------------------------"

allprojects {
    group = "me.smash"
    version = new ProjectVersion(1, 0, System.env.BUILD_NUMBER)

    repositories {
        jcenter()
        mavenCentral()
    }

    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: "maven-publish"

    sonarqube {
        properties {
            property "sonar.host.url", System.getenv("SONAR_SERVER_URL") ?: "http://localhost:9000"
        }
    }
    ext.config = parsedConfig
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
/*
    apply from: "$rootDir/gradle/checkstyle.gradle"
    apply from: "$rootDir/gradle/pmd.gradle"
    apply from: "$rootDir/gradle/spotbugs.gradle"
    apply from: "$rootDir/gradle/jdepend.gradle"
*/

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }


    tasks.withType(SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    afterEvaluate {
        plugins.withType(JDependPlugin) {
            sourceSets.each { sourceSet ->
                def checkStyleTaskName = "jdepend${sourceSet.name.capitalize()}"
                def checkStyleTask = tasks.getByName(checkStyleTaskName)

                File xmlFile = checkStyleTask.outputs.files.filter { it.name.endsWith(".xml") }.singleFile
                if (xmlFile.exists()) {
                    XmlToHtml reportTask = tasks.create("${checkStyleTaskName}Report", XmlToHtml)
                    checkStyleTask.finalizedBy reportTask
                    reportTask.xmlFile = xmlFile
                    reportTask.styleFile = file("$rootDir/config/jdepend/jdepend-report.xslt")
                    reportTask.htmlFile = file("$buildDir/jdepend/${checkStyleTaskName}.html")
                }
            }
        }
    }


    publishing {
        repositories {
            maven {
                name = "smash"
                url = "$rootDir/../smash-repo"
            }

            maven {
                name = "bintary"
                url = "https://api.bintray.com/maven/aureamohammadalavi/smash-repo/my-first-package/;publish=1"

                credentials {
                    username = "aureamohammadalavi"
                    password = System.getenv("BINTRAY_API_KEY")
                }
            }
        }
    }
}

eclipse {
    project {
        name = "todo"
        comment = "todo project"
        referencedProjects 'model', 'repository', 'web'
    }
}

idea {
    project {
        ipr.withXml { provider ->
            def node = provider.asNode()
            def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
            gradleSettings.appendNode('option', [name: 'linkedProjectPath', value: '$PROJECT_DIR$/build.gradle'])
        }
    }
}

task copyFilesToVagrantFiles(type: Copy, dependsOn: ":repository:processResources") {
    into "$rootDir/tomcat-vagrant/files/"
}

gradle.taskGraph.whenReady {
    copyFilesToVagrantFiles.configure {
        from project(":repository").buildDir.path + "/resources/main/create-todo.sql"
        from project(":repository").configurations.h2
    }
    copyWarToTmp.configure {
        file = project(":web").tasks.withType(War).first().outputs.files.singleFile
    }
}

task toHtml(type: XmlToHtml) {
    xmlFile = file("$projectDir/student.xml")
    htmlFile = file("$projectDir/student.html")
    styleFile = file("$projectDir/student_html.xsl")
}

task vagrantUp(type: VagrantTask, dependsOn: copyFilesToVagrantFiles) {
    commands = ["up", "--provision"]
    dir = file("$rootDir/tomcat-vagrant")
}

task vagrantRestart(type: VagrantTask, dependsOn: copyFilesToVagrantFiles) {
    commands = ["reload", "--provision"]
    dir = file("$rootDir/tomcat-vagrant")
}

task vagrantDestroy(type: VagrantTask) {
    commands = ["destroy"]
    dir = file("$rootDir/tomcat-vagrant")
}

task vagrantSshConfig(type: VagrantTask) {
    commands = ["ssh-config"]
    dir = file("$rootDir/tomcat-vagrant")
}

task vagrantStatus(type: VagrantTask) {
    commands = ["status"]
    dir = file("$rootDir/tomcat-vagrant")
}

task vagrantSuspend(type: VagrantTask) {
    commands = ["suspend"]
    dir = file("$rootDir/tomcat-vagrant")
}

task vagrantResume(type: VagrantTask) {
    commands = ["resume"]
    dir = file("$rootDir/tomcat-vagrant")
}

configurations {
    jsch
}
dependencies {
    jsch group: 'org.apache.ant', name: 'ant-jsch', version: '1.10.7'
}

tasks.withType(SshExecTask) {
    username = config.server.username
    remoteHost = config.server.hostname
    keyFile = file(config.server.keyfile)
    classpath = configurations.jsch
}

task copyWarToTmp(type: ScpTask, dependsOn: ":web:war") {
    username = config.server.username
    destinationDir = "/tmp"
    remoteHost = config.server.hostname
    keyFile = file(config.server.keyfile)
    classpath = configurations.jsch
}

task shutDownTomcat(type: SshExecTask) {
    command = "sudo -u tomcat /home/tomcat/apache-tomcat/bin/shutdown.sh"
}

task deleteWebApp(type: SshExecTask, dependsOn: shutDownTomcat) {
    command = "sudo -u tomcat rm -rf /home/tomcat/apache-tomcat/webapps/todo && " +
            "sudo -u tomcat rm /home/tomcat/apache-tomcat/webapps/todo.war || true && " +
            "sudo -u tomcat rm -rf /home/tomcat/apache-tomcat/work"
}

task deployWar(type: SshExecTask, dependsOn: [deleteWebApp, copyWarToTmp]) {
    gradle.taskGraph.whenReady {
        def warName = project(':web').tasks.withType(War).first().archiveFileName.get()
        command = "sudo -u tomcat cp /tmp/$warName /home/tomcat/apache-tomcat/webapps/todo.war"
    }
}

task startTomcat(type: SshExecTask, dependsOn: deployWar) {
    command = "sudo -u tomcat /home/tomcat/apache-tomcat/bin/startup.sh"
}
